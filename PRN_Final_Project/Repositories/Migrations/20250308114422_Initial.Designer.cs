// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.DB;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250308114422_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Entities.Account", b =>
                {
                    b.Property<Guid>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("accountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Repositories.Entities.Blog", b =>
                {
                    b.Property<Guid>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BlogID");

                    b.HasIndex("accountID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Repositories.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("appointmentDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("cusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("serviceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("slotID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("theraID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BookingID");

                    b.HasIndex("cusID");

                    b.HasIndex("serviceID");

                    b.HasIndex("slotID");

                    b.HasIndex("theraID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.Property<Guid>("cusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("gender")
                        .HasColumnType("bit");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("cusID");

                    b.HasIndex("accountID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Repositories.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("evaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("evaID");

                    b.HasIndex("accountID");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Repositories.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("serviceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("FeedbackID");

                    b.HasIndex("accountID");

                    b.HasIndex("serviceID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Repositories.Entities.Payment", b =>
                {
                    b.Property<Guid>("paymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("bankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("bookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("orderInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("paymentDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("responseCode")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentID");

                    b.HasIndex("bookingID");

                    b.HasIndex("cusID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Repositories.Entities.Rating", b =>
                {
                    b.Property<Guid>("rateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TherapisttheraID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("rates")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("theraID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("rateID");

                    b.HasIndex("TherapisttheraID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Repositories.Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("maxRage")
                        .HasColumnType("int");

                    b.Property<int>("minRage")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ServiceID");

                    b.HasIndex("ServiceTypeID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Repositories.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("maxRage")
                        .HasColumnType("int");

                    b.Property<int>("minRage")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ServiceTypeID");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Repositories.Entities.Slot", b =>
                {
                    b.Property<Guid>("SlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("endTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("startTime")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SlotID");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Repositories.Entities.Therapist", b =>
                {
                    b.Property<Guid>("theraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("exp")
                        .HasColumnType("int");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("gender")
                        .HasColumnType("bit");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("theraID");

                    b.HasIndex("accountID");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("Repositories.Entities.TherapyResult", b =>
                {
                    b.Property<Guid>("theraResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("bookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("theraResultID");

                    b.HasIndex("bookingID");

                    b.ToTable("TherapyResults");
                });

            modelBuilder.Entity("Repositories.Entities.Blog", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Account")
                        .WithMany("Blogs")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Entities.Booking", b =>
                {
                    b.HasOne("Repositories.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("cusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("serviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("slotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Therapist", "Therapist")
                        .WithMany("Bookings")
                        .HasForeignKey("theraID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Account")
                        .WithMany("Customer")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Entities.Evaluation", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Accounts")
                        .WithMany("Evaluations")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Repositories.Entities.Feedback", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Service", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("serviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Repositories.Entities.Payment", b =>
                {
                    b.HasOne("Repositories.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("bookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Customer", "Customer")
                        .WithMany("Payment")
                        .HasForeignKey("cusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repositories.Entities.Rating", b =>
                {
                    b.HasOne("Repositories.Entities.Therapist", "Therapist")
                        .WithMany("Ratings")
                        .HasForeignKey("TherapisttheraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Repositories.Entities.Service", b =>
                {
                    b.HasOne("Repositories.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Repositories.Entities.Therapist", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Account")
                        .WithMany("Therapists")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Entities.TherapyResult", b =>
                {
                    b.HasOne("Repositories.Entities.Booking", "Booking")
                        .WithMany("TherapyResults")
                        .HasForeignKey("bookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Repositories.Entities.Account", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Customer");

                    b.Navigation("Evaluations");

                    b.Navigation("Feedbacks");

                    b.Navigation("Therapists");
                });

            modelBuilder.Entity("Repositories.Entities.Booking", b =>
                {
                    b.Navigation("TherapyResults");
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Repositories.Entities.Service", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Repositories.Entities.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Repositories.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Repositories.Entities.Therapist", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
